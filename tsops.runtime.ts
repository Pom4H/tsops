/**
 * Auto-generated runtime configuration for service: web
 * Generated by: tsops prune web
 * Dependencies: web, api, auth, observability
 * 
 * This file contains only the configuration needed for the 'web' service
 * and its direct dependencies. It's optimized for runtime performance
 * and includes only essential data.
 */

export interface ServiceEndpoint {
  service: string
  port: number
  protocol: 'http' | 'https' | 'tcp' | 'udp'
  internal: string
  external?: string
}

export interface ServiceConfig {
  name: string
  kind: 'gateway' | 'api' | 'worker' | 'database' | 'cache'
  image: string
  endpoints: ServiceEndpoint[]
  dependencies: ServiceEndpoint[]
  resources: {
    cpu: string
    memory: string
    storage?: string
  }
  environment: Record<string, string>
  secrets: Record<string, string>
  configMaps: Record<string, string>
}

export interface RuntimeConfig {
  project: 'hyper-graph'
  namespace: 'prod'
  domain: 'example.com'
  services: {
    web: ServiceConfig
    api: ServiceConfig
    auth: ServiceConfig
    observability: ServiceConfig
  }
  network: {
    ingress: {
      host: 'example.com'
      tls: true
      className: 'nginx'
    }
  }
}

// Runtime configuration optimized for 'web' service
export const config: RuntimeConfig = {
  project: 'hyper-graph',
  namespace: 'prod',
  domain: 'example.com',
  
  services: {
    web: {
      name: 'web',
      kind: 'gateway',
      image: 'ghcr.io/org/hyper-graph-web:abc123',
      endpoints: [
        {
          service: 'web',
          port: 8080,
          protocol: 'http',
          internal: 'http://hyper-graph-web.prod.svc.cluster.local:8080',
          external: 'https://example.com'
        }
      ],
      dependencies: [
        {
          service: 'api',
          port: 8080,
          protocol: 'http',
          internal: 'http://hyper-graph-api.prod.svc.cluster.local:8080'
        },
        {
          service: 'auth',
          port: 8081,
          protocol: 'http',
          internal: 'http://hyper-graph-auth.prod.svc.cluster.local:8081'
        },
        {
          service: 'observability',
          port: 4318,
          protocol: 'http',
          internal: 'http://hyper-graph-observability.prod.svc.cluster.local:4318'
        }
      ],
      resources: {
        cpu: '100m',
        memory: '128Mi'
      },
      environment: {
        NODE_ENV: 'production',
        PORT: '8080',
        API_URL: 'http://hyper-graph-api.prod.svc.cluster.local:8080',
        AUTH_URL: 'http://hyper-graph-auth.prod.svc.cluster.local:8081',
        OBSERVABILITY_URL: 'http://hyper-graph-observability.prod.svc.cluster.local:4318',
        DOMAIN: 'example.com'
      },
      secrets: {
        JWT_SECRET: 'super-secret-jwt-key',
        API_KEY: 'api-key-12345'
      },
      configMaps: {
        LOG_LEVEL: 'info',
        FEATURE_FLAGS: '{"newUI": true, "betaFeatures": false}'
      }
    },
    
    api: {
      name: 'api',
      kind: 'api',
      image: 'ghcr.io/org/hyper-graph-api:abc123',
      endpoints: [
        {
          service: 'api',
          port: 8080,
          protocol: 'http',
          internal: 'http://hyper-graph-api.prod.svc.cluster.local:8080'
        }
      ],
      dependencies: [
        {
          service: 'database',
          port: 5432,
          protocol: 'tcp',
          internal: 'hyper-graph-database.prod.svc.cluster.local:5432'
        },
        {
          service: 'cache',
          port: 6379,
          protocol: 'tcp',
          internal: 'hyper-graph-cache.prod.svc.cluster.local:6379'
        }
      ],
      resources: {
        cpu: '500m',
        memory: '512Mi'
      },
      environment: {
        NODE_ENV: 'production',
        PORT: '8080',
        DATABASE_URL: 'postgresql://user:pass@hyper-graph-database.prod.svc.cluster.local:5432/hypergraph',
        REDIS_URL: 'redis://hyper-graph-cache.prod.svc.cluster.local:6379',
        JWT_SECRET: 'super-secret-jwt-key'
      },
      secrets: {
        DATABASE_PASSWORD: 'db-password-123',
        JWT_SECRET: 'super-secret-jwt-key'
      },
      configMaps: {
        LOG_LEVEL: 'info',
        API_RATE_LIMIT: '1000'
      }
    },
    
    auth: {
      name: 'auth',
      kind: 'api',
      image: 'ghcr.io/org/hyper-graph-auth:abc123',
      endpoints: [
        {
          service: 'auth',
          port: 8081,
          protocol: 'http',
          internal: 'http://hyper-graph-auth.prod.svc.cluster.local:8081'
        }
      ],
      dependencies: [
        {
          service: 'database',
          port: 5432,
          protocol: 'tcp',
          internal: 'hyper-graph-database.prod.svc.cluster.local:5432'
        }
      ],
      resources: {
        cpu: '200m',
        memory: '256Mi'
      },
      environment: {
        NODE_ENV: 'production',
        PORT: '8081',
        DATABASE_URL: 'postgresql://user:pass@hyper-graph-database.prod.svc.cluster.local:5432/hypergraph'
      },
      secrets: {
        JWT_SECRET: 'super-secret-jwt-key',
        OAUTH_CLIENT_SECRET: 'oauth-secret-123'
      },
      configMaps: {
        LOG_LEVEL: 'info',
        SESSION_TIMEOUT: '3600'
      }
    },
    
    observability: {
      name: 'observability',
      kind: 'worker',
      image: 'ghcr.io/org/hyper-graph-observability:abc123',
      endpoints: [
        {
          service: 'observability',
          port: 4318,
          protocol: 'http',
          internal: 'http://hyper-graph-observability.prod.svc.cluster.local:4318'
        }
      ],
      dependencies: [],
      resources: {
        cpu: '100m',
        memory: '128Mi'
      },
      environment: {
        NODE_ENV: 'production',
        PORT: '4318',
        OTEL_EXPORTER_OTLP_ENDPOINT: 'http://jaeger-collector.prod.svc.cluster.local:14268'
      },
      secrets: {},
      configMaps: {
        LOG_LEVEL: 'info',
        SAMPLING_RATE: '0.1'
      }
    }
  },
  
  network: {
    ingress: {
      host: 'example.com',
      tls: true,
      className: 'nginx'
    }
  }
}

// Helper functions for easy access
export function getService(name: keyof RuntimeConfig['services']): ServiceConfig {
  return config.services[name]
}

export function getServiceEndpoint(service: string, port: number): ServiceEndpoint | undefined {
  const serviceConfig = config.services[service as keyof RuntimeConfig['services']]
  return serviceConfig?.endpoints.find(ep => ep.port === port)
}

export function getDependency(service: string, dependency: string): ServiceEndpoint | undefined {
  const serviceConfig = config.services[service as keyof RuntimeConfig['services']]
  return serviceConfig?.dependencies.find(dep => dep.service === dependency)
}

export function getEnvironment(service: string): Record<string, string> {
  return config.services[service as keyof RuntimeConfig['services']]?.environment || {}
}

export function getSecret(service: string, key: string): string | undefined {
  return config.services[service as keyof RuntimeConfig['services']]?.secrets[key]
}

export function getConfigMap(service: string, key: string): string | undefined {
  return config.services[service as keyof RuntimeConfig['services']]?.configMaps[key]
}

// Type-safe service names
export type ServiceName = keyof RuntimeConfig['services']

// Type-safe dependency resolution
export type ServiceDependencies<T extends ServiceName> = 
  RuntimeConfig['services'][T]['dependencies'][number]['service']

// Example usage:
// const apiUrl = getServiceEndpoint('api', 8080)?.internal
// const dbUrl = getDependency('api', 'database')?.internal
// const jwtSecret = getSecret('web', 'JWT_SECRET')