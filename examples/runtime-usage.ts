/**
 * Example of using the new runtime configuration
 * Shows how the simplified approach works in practice
 */

import { useConfig } from 'tsops'

// Example 1: Using generated configuration
// This would be generated by: tsops prune web
const prunedConfig = {
  project: 'hyper-graph',
  namespace: 'prod',
  service: {
    name: 'web',
    kind: 'gateway',
    image: 'ghcr.io/org/hyper-graph-web:abc123',
    internalUrl: 'http://hyper-graph-web.prod.svc.cluster.local:8080',
    externalUrl: 'https://example.com',
    port: 8080,
    resources: {
      cpu: '100m',
      memory: '128Mi',
      replicas: 1
    }
  },
  dependencies: [
    {
      service: 'api',
      url: 'http://hyper-graph-api.prod.svc.cluster.local:8080',
      port: 8080,
      protocol: 'http',
      description: 'Main API service'
    },
    {
      service: 'auth',
      url: 'http://hyper-graph-auth.prod.svc.cluster.local:8081',
      port: 8081,
      protocol: 'http',
      description: 'Authentication service'
    }
  ],
  environment: {
    NODE_ENV: { type: 'static', value: 'production' },
    PORT: { type: 'static', value: '8080' },
    API_URL: { type: 'static', value: 'http://hyper-graph-api.prod.svc.cluster.local:8080' },
    AUTH_URL: { type: 'static', value: 'http://hyper-graph-auth.prod.svc.cluster.local:8081' },
    JWT_SECRET: { type: 'secret', secretName: 'web-secrets', secretKey: 'JWT_SECRET' },
    LOG_LEVEL: { type: 'configmap', configMapName: 'web-config', configMapKey: 'LOG_LEVEL' }
  }
}

// Create configuration accessor
const config = useConfig(prunedConfig)

// Example Express.js application using the config
import express from 'express'

const app = express()

// Get service URLs
const apiUrl = config.dependencyUrl('api')
const authUrl = config.dependencyUrl('auth')

// Get environment variables
const port = config.env('PORT')
const nodeEnv = config.env('NODE_ENV')

// Get secret references for Kubernetes
const jwtSecretRef = config.secretRef('JWT_SECRET')
const logLevelRef = config.configMapRef('LOG_LEVEL')

console.log('Service configuration:')
console.log(`- API URL: ${apiUrl}`)
console.log(`- Auth URL: ${authUrl}`)
console.log(`- Port: ${port}`)
console.log(`- Environment: ${nodeEnv}`)

// Example API client setup
const apiClient = {
  baseURL: apiUrl,
  timeout: 5000,
  headers: {
    'User-Agent': 'web-service',
    'Content-Type': 'application/json'
  }
}

const authClient = {
  baseURL: authUrl,
  timeout: 5000,
  headers: {
    'User-Agent': 'web-service',
    'Content-Type': 'application/json'
  }
}

// Example route that uses the dependencies
app.get('/api/data', async (req, res) => {
  try {
    // Call API service
    const response = await fetch(`${apiUrl}/data`, {
      headers: {
        'Authorization': `Bearer ${req.headers.authorization}`
      }
    })
    
    const data = await response.json()
    res.json(data)
  } catch (error) {
    console.error('Failed to fetch data from API:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

app.get('/auth/verify', async (req, res) => {
  try {
    // Call Auth service
    const response = await fetch(`${authUrl}/verify`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${req.headers.authorization}`
      }
    })
    
    const result = await response.json()
    res.json(result)
  } catch (error) {
    console.error('Failed to verify with Auth service:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: config.service.name,
    version: config.service.image.split(':')[1],
    dependencies: config.dependencies.map(dep => ({
      service: dep.service,
      status: 'connected' // In real app, you'd ping each service
    }))
  })
})

app.listen(port, () => {
  console.log(`Web service listening on port ${port}`)
  console.log(`Environment: ${nodeEnv}`)
})

// Example 2: Using with JSON string (as suggested)
const configFromJSON = useConfig(JSON.stringify(prunedConfig, null, 2))

// Example 3: Advanced usage
console.log('All dependencies:', config.dependencyNames)
console.log('Has API dependency:', config.hasDependency('api'))
console.log('Service info:', config.service)

// Example 4: Error handling
try {
  const invalidUrl = config.dependencyUrl('invalid-service')
} catch (error) {
  console.error('Dependency not found:', error.message)
}

try {
  const invalidEnv = config.env('INVALID_ENV')
} catch (error) {
  console.error('Environment variable not found:', error.message)
}