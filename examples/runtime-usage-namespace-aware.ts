/**
 * Example showing namespace-aware runtime usage
 * The same code works with different configurations for different namespaces
 */

import { useConfig } from 'tsops'

// This would be generated by: tsops prune web --namespace dev
const devConfig = useConfig({
  project: 'hyper-graph',
  namespace: 'dev',
  service: {
    name: 'web',
    kind: 'gateway',
    image: 'ghcr.io/org/hyper-graph-web:abc123',
    internalUrl: 'http://hyper-graph-web.dev.svc.cluster.local:8080',
    externalUrl: 'https://dev.hyper-graph.com',
    port: 8080,
    resources: { cpu: '100m', memory: '128Mi', replicas: 1 }
  },
  dependencies: [
    {
      service: 'api',
      url: 'http://hyper-graph-api.dev.svc.cluster.local:8080',
      port: 8080,
      protocol: 'http'
    }
  ],
  environment: {
    API_URL: { type: 'static', value: 'http://hyper-graph-api.dev.svc.cluster.local:8080' },
    DOMAIN: { type: 'static', value: 'dev.hyper-graph.com' },
    DEBUG: { type: 'static', value: 'true' },
    LOG_LEVEL: { type: 'static', value: 'debug' }
  },
  namespaceVars: {
    domain: 'dev.hyper-graph.com',
    replicas: 1,
    debug: true,
    logLevel: 'debug'
  }
})

// This would be generated by: tsops prune web --namespace prod
const prodConfig = useConfig({
  project: 'hyper-graph',
  namespace: 'prod',
  service: {
    name: 'web',
    kind: 'gateway',
    image: 'ghcr.io/org/hyper-graph-web:abc123',
    internalUrl: 'http://hyper-graph-web.prod.svc.cluster.local:8080',
    externalUrl: 'https://hyper-graph.com',
    port: 8080,
    resources: { cpu: '100m', memory: '128Mi', replicas: 3 }
  },
  dependencies: [
    {
      service: 'api',
      url: 'http://hyper-graph-api.prod.svc.cluster.local:8080',
      port: 8080,
      protocol: 'http'
    }
  ],
  environment: {
    API_URL: { type: 'static', value: 'http://hyper-graph-api.prod.svc.cluster.local:8080' },
    DOMAIN: { type: 'static', value: 'hyper-graph.com' },
    DEBUG: { type: 'static', value: 'false' },
    LOG_LEVEL: { type: 'static', value: 'warn' }
  },
  namespaceVars: {
    domain: 'hyper-graph.com',
    replicas: 3,
    debug: false,
    logLevel: 'warn'
  }
})

// Example application that works with both configurations
function createApp(config: ReturnType<typeof useConfig>) {
  console.log(`🚀 Starting ${config.service.name} service`)
  console.log(`📦 Namespace: ${config.namespace}`)
  console.log(`🌐 Domain: ${config.namespaceVar('domain')}`)
  console.log(`🔧 Debug: ${config.namespaceVar('debug')}`)
  console.log(`📊 Replicas: ${config.namespaceVar('replicas')}`)
  console.log(`📝 Log Level: ${config.env('LOG_LEVEL')}`)
  
  // Get service URLs
  const apiUrl = config.dependencyUrl('api')
  console.log(`🔗 API URL: ${apiUrl}`)
  
  // Example API client setup
  const apiClient = {
    baseURL: apiUrl,
    timeout: 5000,
    headers: {
      'User-Agent': `${config.service.name}-service`,
      'Content-Type': 'application/json'
    }
  }
  
  return {
    config,
    apiClient,
    
    // Health check
    healthCheck: () => ({
      status: 'healthy',
      service: config.service.name,
      namespace: config.namespace,
      version: config.service.image.split(':')[1],
      dependencies: config.dependencies.map(dep => ({
        service: dep.service,
        url: dep.url,
        status: 'connected'
      }))
    })
  }
}

// Usage examples
console.log('=== DEV ENVIRONMENT ===')
const devApp = createApp(devConfig)
console.log('Health check:', devApp.healthCheck())

console.log('\n=== PROD ENVIRONMENT ===')
const prodApp = createApp(prodConfig)
console.log('Health check:', prodApp.healthCheck())

// The same code works with different configurations!
// - dev: API_URL = http://hyper-graph-api.dev.svc.cluster.local:8080
// - prod: API_URL = http://hyper-graph-api.prod.svc.cluster.local:8080

// Namespace variables are accessible
console.log('\n=== NAMESPACE VARIABLES ===')
console.log('Dev domain:', devConfig.namespaceVar('domain'))
console.log('Dev debug:', devConfig.namespaceVar('debug'))
console.log('Dev replicas:', devConfig.namespaceVar('replicas'))

console.log('Prod domain:', prodConfig.namespaceVar('domain'))
console.log('Prod debug:', prodConfig.namespaceVar('debug'))
console.log('Prod replicas:', prodConfig.namespaceVar('replicas'))

// Environment variables are namespace-aware
console.log('\n=== ENVIRONMENT VARIABLES ===')
console.log('Dev API URL:', devConfig.env('API_URL'))
console.log('Dev LOG_LEVEL:', devConfig.env('LOG_LEVEL'))

console.log('Prod API URL:', prodConfig.env('API_URL'))
console.log('Prod LOG_LEVEL:', prodConfig.env('LOG_LEVEL'))