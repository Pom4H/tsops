/**
 * Minimal runtime config for service: web
 * Generated by: tsops prune web --minimal
 */

export const config = {
  project: 'hyper-graph',
  namespace: 'prod',
  domain: 'example.com',
  
  // Current service
  service: {
    name: 'web',
    kind: 'gateway',
    image: 'ghcr.io/org/hyper-graph-web:abc123',
    port: 8080,
    internalUrl: 'http://hyper-graph-web.prod.svc.cluster.local:8080',
    externalUrl: 'https://example.com'
  },
  
  // Direct dependencies only
  dependencies: {
    api: {
      url: 'http://hyper-graph-api.prod.svc.cluster.local:8080',
      port: 8080
    },
    auth: {
      url: 'http://hyper-graph-auth.prod.svc.cluster.local:8081', 
      port: 8081
    },
    observability: {
      url: 'http://hyper-graph-observability.prod.svc.cluster.local:4318',
      port: 4318,
      description: 'OTLP collector'
    }
  },
  
  // Environment variables
  env: {
    NODE_ENV: 'production',
    PORT: '8080',
    API_URL: 'http://hyper-graph-api.prod.svc.cluster.local:8080',
    AUTH_URL: 'http://hyper-graph-auth.prod.svc.cluster.local:8081',
    OBSERVABILITY_URL: 'http://hyper-graph-observability.prod.svc.cluster.local:4318'
  },
  
  // Secrets (resolved values)
  secrets: {
    JWT_SECRET: 'super-secret-jwt-key',
    API_KEY: 'api-key-12345'
  },
  
  // ConfigMaps (resolved values)  
  config: {
    LOG_LEVEL: 'info',
    FEATURE_FLAGS: '{"newUI": true, "betaFeatures": false}'
  }
}

// Helper functions
export const getDependency = (name: keyof typeof config.dependencies) => config.dependencies[name]
export const getEnv = (key: string) => config.env[key as keyof typeof config.env]
export const getSecret = (key: string) => config.secrets[key as keyof typeof config.secrets]
export const getConfig = (key: string) => config.config[key as keyof typeof config.config]

// Type-safe dependency names
export type DependencyName = keyof typeof config.dependencies