/**
 * Runtime config for service: web (corrected version)
 * Generated by: tsops prune web
 * 
 * Key principles:
 * 1. No secret values - only references
 * 2. Only direct dependencies - web doesn't need to know about database
 * 3. Environment variables are references, not resolved values
 */

export interface ServiceEndpoint {
  service: string
  port: number
  protocol: 'http' | 'https' | 'tcp' | 'udp'
  internal: string
  external?: string
}

export interface ServiceConfig {
  name: string
  kind: 'gateway' | 'api' | 'worker' | 'database' | 'cache'
  image: string
  endpoints: ServiceEndpoint[]
  dependencies: ServiceEndpoint[]
  resources: {
    cpu: string
    memory: string
    storage?: string
  }
  // Environment variable references (not values!)
  environment: {
    [key: string]: {
      type: 'static' | 'secret' | 'configmap' | 'env'
      value?: string
      secretName?: string
      secretKey?: string
      configMapName?: string
      configMapKey?: string
      envVar?: string
    }
  }
}

export interface RuntimeConfig {
  project: 'hyper-graph'
  namespace: 'prod'
  domain: 'example.com'
  services: {
    web: ServiceConfig
    // Only direct dependencies of web
    api: ServiceConfig
    auth: ServiceConfig
    observability: ServiceConfig
  }
  network: {
    ingress: {
      host: 'example.com'
      tls: true
      className: 'nginx'
    }
  }
}

// Runtime configuration - web service and its direct dependencies only
export const config: RuntimeConfig = {
  project: 'hyper-graph',
  namespace: 'prod',
  domain: 'example.com',
  
  services: {
    web: {
      name: 'web',
      kind: 'gateway',
      image: 'ghcr.io/org/hyper-graph-web:abc123',
      endpoints: [
        {
          service: 'web',
          port: 8080,
          protocol: 'http',
          internal: 'http://hyper-graph-web.prod.svc.cluster.local:8080',
          external: 'https://example.com'
        }
      ],
      dependencies: [
        {
          service: 'api',
          port: 8080,
          protocol: 'http',
          internal: 'http://hyper-graph-api.prod.svc.cluster.local:8080'
        },
        {
          service: 'auth',
          port: 8081,
          protocol: 'http',
          internal: 'http://hyper-graph-auth.prod.svc.cluster.local:8081'
        },
        {
          service: 'observability',
          port: 4318,
          protocol: 'http',
          internal: 'http://hyper-graph-observability.prod.svc.cluster.local:4318'
        }
      ],
      resources: {
        cpu: '100m',
        memory: '128Mi'
      },
      environment: {
        NODE_ENV: {
          type: 'static',
          value: 'production'
        },
        PORT: {
          type: 'static',
          value: '8080'
        },
        API_URL: {
          type: 'static',
          value: 'http://hyper-graph-api.prod.svc.cluster.local:8080'
        },
        AUTH_URL: {
          type: 'static',
          value: 'http://hyper-graph-auth.prod.svc.cluster.local:8081'
        },
        OBSERVABILITY_URL: {
          type: 'static',
          value: 'http://hyper-graph-observability.prod.svc.cluster.local:4318'
        },
        DOMAIN: {
          type: 'static',
          value: 'example.com'
        },
        // Secret references (not values!)
        JWT_SECRET: {
          type: 'secret',
          secretName: 'web-secrets',
          secretKey: 'JWT_SECRET'
        },
        API_KEY: {
          type: 'secret',
          secretName: 'web-secrets',
          secretKey: 'API_KEY'
        },
        // ConfigMap references
        LOG_LEVEL: {
          type: 'configmap',
          configMapName: 'web-config',
          configMapKey: 'LOG_LEVEL'
        },
        FEATURE_FLAGS: {
          type: 'configmap',
          configMapName: 'web-config',
          configMapKey: 'FEATURE_FLAGS'
        }
      }
    },
    
    // Only direct dependencies - no database, no cache!
    api: {
      name: 'api',
      kind: 'api',
      image: 'ghcr.io/org/hyper-graph-api:abc123',
      endpoints: [
        {
          service: 'api',
          port: 8080,
          protocol: 'http',
          internal: 'http://hyper-graph-api.prod.svc.cluster.local:8080'
        }
      ],
      dependencies: [], // web doesn't need to know api's dependencies
      resources: {
        cpu: '500m',
        memory: '512Mi'
      },
      environment: {
        NODE_ENV: {
          type: 'static',
          value: 'production'
        },
        PORT: {
          type: 'static',
          value: '8080'
        }
        // web doesn't need api's internal env vars
      }
    },
    
    auth: {
      name: 'auth',
      kind: 'api',
      image: 'ghcr.io/org/hyper-graph-auth:abc123',
      endpoints: [
        {
          service: 'auth',
          port: 8081,
          protocol: 'http',
          internal: 'http://hyper-graph-auth.prod.svc.cluster.local:8081'
        }
      ],
      dependencies: [], // web doesn't need to know auth's dependencies
      resources: {
        cpu: '200m',
        memory: '256Mi'
      },
      environment: {
        NODE_ENV: {
          type: 'static',
          value: 'production'
        },
        PORT: {
          type: 'static',
          value: '8081'
        }
      }
    },
    
    observability: {
      name: 'observability',
      kind: 'worker',
      image: 'ghcr.io/org/hyper-graph-observability:abc123',
      endpoints: [
        {
          service: 'observability',
          port: 4318,
          protocol: 'http',
          internal: 'http://hyper-graph-observability.prod.svc.cluster.local:4318'
        }
      ],
      dependencies: [],
      resources: {
        cpu: '100m',
        memory: '128Mi'
      },
      environment: {
        NODE_ENV: {
          type: 'static',
          value: 'production'
        },
        PORT: {
          type: 'static',
          value: '4318'
        }
      }
    }
  },
  
  network: {
    ingress: {
      host: 'example.com',
      tls: true,
      className: 'nginx'
    }
  }
}

// Helper functions for safe access
export function getService(name: keyof RuntimeConfig['services']): ServiceConfig {
  return config.services[name]
}

export function getServiceEndpoint(service: string, port: number): ServiceEndpoint | undefined {
  const serviceConfig = config.services[service as keyof RuntimeConfig['services']]
  return serviceConfig?.endpoints.find(ep => ep.port === port)
}

export function getDependency(service: string, dependency: string): ServiceEndpoint | undefined {
  const serviceConfig = config.services[service as keyof RuntimeConfig['services']]
  return serviceConfig?.dependencies.find(dep => dep.service === dependency)
}

// Safe environment variable access
export function getEnvironment(service: string): Record<string, any> {
  return config.services[service as keyof RuntimeConfig['services']]?.environment || {}
}

// Type-safe service names
export type ServiceName = keyof RuntimeConfig['services']

// Type-safe dependency resolution
export type ServiceDependencies<T extends ServiceName> = 
  RuntimeConfig['services'][T]['dependencies'][number]['service']

// Example usage:
// const apiUrl = getServiceEndpoint('api', 8080)?.internal
// const authUrl = getDependency('web', 'auth')?.internal
// const envVars = getEnvironment('web')
// const jwtSecretRef = envVars.JWT_SECRET // { type: 'secret', secretName: 'web-secrets', secretKey: 'JWT_SECRET' }